name: Build and dockerize the frontend nuxt app.

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  DOCKER_IMAGE_FRONTEND: greyfighter/prepre:nuxt-app-v1 # Docker Hub repo name
  DOCKER_IMAGE_TAG: v1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Install PNPM Globally
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          # cd frontend
          pnpm build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION="v2.29.7"  # Use the latest version as needed
          sudo curl -SL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Check version to confirm installation

      - name: Build and push Docker images
        run: |
          # cd frontend  # Ensure you are in the frontend directory
          docker-compose -f docker-compose-frontend.yml build

          docker-compose -f docker-compose-frontend.yml push

      ###############################
      ###############################
      ###############################
      ###############################
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Set up SSH directory and keys
        run: |
          mkdir -p ~/.ssh
          # Save the private key with proper line breaks
          echo "${{ secrets.VPS_SSH_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Save the public key
          echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4/ggD+eWySay8W1q3cqi/aiddrHGPM0ZR1yLLixvDFpxc6Dq7HlFGQixBQ5KjC0JntNuSgnsi3X9tMW0vjfI4CxDHzXu5Ab9DHRMWXz5l4kYhOwlpKmJeyBu8Yk9ErEP7QUpz1E3L+9xSkV5dAZvzdcLjtgyXSjKB3GBdG9IbNlFiY9FsOF7FNXEKqXiORQDF0BFQJ39nZX9LYzRD7MUue05XiC85Skqr4nvVyePomRpWV85YUiYY/vw2aFHNiMGHm39YfrnOaq8ZgmYIo3eny2VmU8x3nyA09YVb4AzSK/PluAVnbCKBKPLjy1msP6FtC9PcLx0nPeL8xfpMN+K/7Prv/7dJkO1tyJEmzTDSoCREkLWmUTrqU42TjVkxfPbkQNSi5de1UrQaR6c2PyOURxQL8eY9xup3UOusoBIsxQps/VgNKTO8XcMZDSmyd1TXeAkHheqkRmoBdJCYmx4dv3HTuTRy3ft0AeVflNEIlM+bAlrVSjtLX5tUgNyuR60= mahmoud@mahmoud-Latitude-E5570" > ~/.ssh/id_rsa.pub
          chmod 644 ~/.ssh/id_rsa.pub

          # Add host key
          ssh-keyscan -H 49.13.174.222 >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Debug - Check SSH Setup
        run: |
          echo "SSH directory contents:"
          ls -la ~/.ssh
          echo "Testing key file existence:"
          test -f ~/.ssh/id_rsa && echo "Private key exists" || echo "Private key missing"
          test -f ~/.ssh/id_rsa.pub && echo "Public key exists" || echo "Public key missing"

      - name: Test SSH Connection
        run: |
          # First attempt - using key with password prompt
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -v -i ~/.ssh/id_rsa admin@49.13.174.222 "echo 'Connection successful!' && whoami" || echo "First attempt failed with $?"

      - name: Copy Docker Compose files to temporary directory on VPS
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -i ~/.ssh/id_rsa docker-compose-frontend.yml admin@49.13.174.222:/tmp/

      - name: Copy deploy script file to temporary directory on VPS
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -i ~/.ssh/id_rsa deploy.nuxt.sh admin@49.13.174.222:/tmp/

      - name: Move files to the final directory with sudo
        run: |

          echo "${{ secrets.VPS_PASSWORD }}" | sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -i ~/.ssh/id_rsa admin@49.13.174.222 "sudo -S mv /tmp/docker-compose-frontend.yml /opt/projects/frontend-nuxt/"

          echo "${{ secrets.VPS_PASSWORD }}" | sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -i ~/.ssh/id_rsa admin@49.13.174.222 "sudo -S mv /tmp/deploy.nuxt.sh /opt/projects/frontend-nuxt/scripts"

      - name: excute the deploy script from the github container
        run: |

          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -i ~/.ssh/id_rsa admin@49.13.174.222 "chmod +x /opt/projects/frontend-nuxt/scripts/deploy.sh && cd /opt/projects/frontend-nuxt/scripts && DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}' DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}' ./deploy.sh"

      # - name: Create and transfer docker-compose file
      #   run: |
      #     cat << 'EOF' > docker-compose-frontend.yml

      #     services:
      #       nuxt-frontend:
      #         image: greyfighter/prepre:nuxt-app-v1
      #         restart: unless-stopped
      #         # Remove fixed host port mapping to allow scaling
      #         ports:
      #           - "3000-3002:3000"
      #         deploy:
      #           mode: replicated
      #           replicas: 3
      #         # Add healthcheck
      #         healthcheck:
      #           test: ["CMD", "curl", "-f", "http://localhost:3000"]
      #           interval: 30s
      #           timeout: 10s
      #           retries: 3
      #           start_period: 40s          EOF

      #     sshpass -p "${{ secrets.VPS_PASSWORD }}" scp -i ~/.ssh/id_rsa docker-compose-frontend.yml admin@49.13.174.222:~/docker-compose-frontend.yml

      # - name: Deploy to VPS
      #   if: success()
      #   run: |
      #     cat << 'EOFS' > deploy.sh
      #       set -x

      #       # Login to Docker Hub
      #       echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      #       echo "Starting deployment as user: $(whoami)"

      #       # Pull the latest image
      #       docker pull greyfighter/prepre:nuxt-app-v1

      #       # Cleanup: Stop all existing containers with the service name
      #       # docker compose down || true
      #       docker-compose -f docker-compose-frontend.yml pull
      #       docker-compose -f docker-compose-frontend.yml up -d --force-recreate --scale nuxt-frontend=3

      #       # Remove any lingering containers
      #       docker rm -f $(docker ps -a -q -f name=nuxt-frontend) || true

      #       # Remove existing container names to avoid conflicts
      #       docker compose rm -f || true

      #       # Start fresh with new containers
      #       docker compose up -d --force-recreate --scale nuxt-frontend=3

      #       # Verify deployment
      #       echo "Verifying deployment..."
      #       sleep 10  # Give containers time to start
      #       docker ps | grep nuxt-frontend
      #       echo "Number of running instances:"
      #       docker ps -q -f name=nuxt-frontend | wc -l
      #     EOFS
      #     chmod +x deploy.sh

      #     sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -i ~/.ssh/id_rsa admin@49.13.174.222 'bash -s' < deploy.sh
      #     rm deploy.sh

      # - name: Health Check
      #   if: success()
      #   run: |
      #     sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -i ~/.ssh/id_rsa admin@49.13.174.222 '
      #       if curl -s http://localhost:3000; then
      #         echo "Health check passed!"
      #         exit 0
      #       else
      #         echo "Health check failed!"
      #         exit 1
      #       fi
      #     '
