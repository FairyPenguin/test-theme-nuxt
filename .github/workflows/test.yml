name: Build and Dockerize the APP

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  DOCKER_IMAGE_FRONTEND: greyfighter/prepre:nuxt-app-v1 # Use your Docker Hub repo name
  DOCKER_IMAGE_TAG: v1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          cd frontend
          pnpm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION="v2.29.7"  # Use the latest version as needed
          sudo curl -SL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Check version to confirm installation

      - name: Build and push Docker images
        run: |
          cd frontend  # Ensure you are in the frontend directory
          docker-compose build
          docker-compose push

      ###############################
      ###############################
      ###############################
      ###############################
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Set up SSH directory and keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Debug - Check SSH key and directory permissions
        run: |
          ls -la ~/.ssh
          echo "SSH directory and key permissions:"
          stat ~/.ssh/id_rsa
          echo "Known hosts content exists:"
          test -f ~/.ssh/known_hosts && echo "Yes" || echo "No"

      - name: Debug - Test Basic SSH Connection
        run: |
          echo "Testing SSH connection with password only..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH Connection Successful' && whoami && pwd" || echo "Password-only SSH failed with exit code $?"

          echo "Testing SSH connection with key only..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH Connection Successful' && whoami && pwd" || echo "Key-only SSH failed with exit code $?"

          echo "Testing SSH connection with both key and password..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH Connection Successful' && whoami && pwd" || echo "Combined SSH failed with exit code $?"

      - name: Debug - Check User and Docker Setup
        run: |
          echo "Attempting to check user and docker setup..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            echo "Current user: $(whoami)"
            echo "Groups membership:"
            groups
            echo "Docker status:"
            systemctl status docker || true
            echo "Docker socket permissions:"
            ls -l /var/run/docker.sock || true
            echo "Can we run docker commands?"
            docker ps || true
            echo "Sudo permissions:"
            sudo -l || true
          ' || echo "Debug check failed with exit code $?"

      - name: Debug - Test Individual Docker Commands
        if: always() # Run even if previous steps failed
        run: |
          echo "Testing docker commands individually..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            commands=(
              "docker info"
              "docker ps"
              "docker images"
            )
            for cmd in "${commands[@]}"; do
              echo "Testing: $cmd"
              $cmd || echo "Failed with exit code $?"
            done
          ' || echo "Docker commands test failed with exit code $?"

      # Only proceed with actual deployment if debug steps succeed
      - name: Deploy to VPS
        if: success()
        run: |
          cat << 'EOFS' > deploy.sh
            set -x  # Enable command echoing
            echo "Starting deployment as user: $(whoami)"
            echo "Testing docker pull..."
            docker pull ${{ env.DOCKER_IMAGE_FRONTEND }}
            echo "Testing docker stop..."
            docker stop my-app || true
            echo "Testing docker rm..."
            docker rm my-app || true
            echo "Testing docker run..."
            docker run -d --name my-app -p 3000:3000 ${{ env.DOCKER_IMAGE_FRONTEND }}
          EOFS
          chmod +x deploy.sh

          echo "Executing deployment script..."
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' < deploy.sh || echo "Deployment failed with exit code $?"
          rm deploy.sh
