name: Build and Dockerize the APP

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  DOCKER_IMAGE_FRONTEND: greyfighter/prepre:nuxt-app-v1 # Use your Docker Hub repo name
  DOCKER_IMAGE_TAG: v1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build application
        run: |
          cd frontend
          pnpm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION="v2.29.7"  # Use the latest version as needed
          sudo curl -SL "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Check version to confirm installation

      - name: Build and push Docker images
        run: |
          cd frontend  # Ensure you are in the frontend directory
          docker-compose build
          docker-compose push

      ###############################
      ###############################
      ###############################
      ###############################
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Set up SSH directory and keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Setup VPS permissions
        run: |
          # Create setup script
          cat << 'EOFS' > setup.sh
            # Add user to docker group
            if ! groups $USER | grep -q '\bdocker\b'; then
              echo "${{ secrets.VPS_PASSWORD }}" | sudo -S usermod -aG docker $USER
            fi
            
            # Add docker commands to sudoers
            echo "${{ secrets.VPS_PASSWORD }}" | sudo -S bash -c 'cat >> /etc/sudoers.d/docker-commands << EOF
            $USER ALL=(ALL) NOPASSWD: /usr/bin/docker pull
            $USER ALL=(ALL) NOPASSWD: /usr/bin/docker stop
            $USER ALL=(ALL) NOPASSWD: /usr/bin/docker rm
            $USER ALL=(ALL) NOPASSWD: /usr/bin/docker run
            EOF'
            
            # Set correct permissions
            echo "${{ secrets.VPS_PASSWORD }}" | sudo -S chmod 440 /etc/sudoers.d/docker-commands
          EOFS
          chmod +x setup.sh

          # Run setup script
          sudo sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} < setup.sh
          rm setup.sh

      - name: Deploy to VPS
        run: |
          # Create deployment script
          cat << 'EOFS' > deploy.sh
            # Load the docker group permissions without logout
            newgrp docker << 'EOF'
              # Pull and run the container
              docker pull ${{ env.DOCKER_IMAGE_FRONTEND }}
              docker stop my-app || true
              docker rm my-app || true
              docker run -d --name my-app -p 3000:3000 ${{ env.DOCKER_IMAGE_FRONTEND }}
            EOF
          EOFS
          chmod +x deploy.sh

          # Execute deployment
          sudo sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' < deploy.sh
          rm deploy.sh

      - name: Health Check
        run: |
          cat << 'EOFS' > healthcheck.sh
            curl -s http://localhost:3000 > /dev/null
            if [ $? -eq 0 ]; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed!"
              exit 1
            fi
          EOFS
          chmod +x healthcheck.sh

          sudo sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'bash -s' < healthcheck.sh
          rm healthcheck.sh
